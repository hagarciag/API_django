activate base

python -m venv venv

# 
venv\Scripts\activate

# 
pip install Django==2.1.5

# Create a project
django-admin startproject EjemploApi

cd EjemploApi/

python .\manage.py runserver

#CTL+C to stop the server

#Let's create the a first app for trditional REST using rest framework (https://www.django-rest-framework.org/)

# help to see all the options
python .\manage.py help

# Let's use startapp to create the app "apiRest"
python .\manage.py startapp apiRest

# To use rest framework we must install some things
pip install djangorestframework 

# Go to all the models of all the apps I have registered and check which have been created and create them
# It create the folder migrations with fields it should create in the db
python .\manage.py makemigrations

# Create a db with all the models. It includes others db to admin the db.
# It creates en sqllite
python .\manage.py migrate

# Create a superuser in the sqllite, user=password=hagarcia
python .\manage.py createsuperuser

# Launcho the website
python .\manage.py runserver

# Go to the admin website and get logged in using the user and password chosen previously:
http://127.0.0.1:8000/admin/login/?next=/admin/ 

# In the website admin I'll be abl to perform different admin tasks and also manage the Cliente model I registed.
# I'll create 4 clients

# A view is configured an its URL registered. Now test
python .\manage.py runserver

# Now it shows Page not found (404), and as I have DEBUG=True in setting.py then it shows the URIs of APIs configured.
# In an production environment DEBUG should be False

# If I go to http://127.0.0.1:8000/apiRest/ ... I can see the information of all the clients I have in my table.

# Postman (https://www.postman.com/downloads/) it's an option to make requests to the API
# This tool has the option "code" which shows how a client could make requests to the API. This shows the query code for different languages

############# Query client by POST method
# First it is necesary to configure POST method in views.py.
# After that I shutdown the server and start it again and now at the end of http://127.0.0.1:8000/apiRest/  => I think is not necessary to restart, Actually it seems to be applied to the running server immediately
# I can see a new section to invoque by POST.

# In the content box I can put the fields required by the POST method (tipo_num_doc and num_doc) to make the request to the POST API
#{
#        "num_doc": "678",
#        "tipo_num_doc": "C"
#}

############# Create new client by an API
# It is necessary to create a new View Class and the POST method to process the request in view.py
# It also requiered to configure de URI of the new View in urls.py
# After this we could make the request to create a new client by a JSON like this:
#{
#    "num_doc": "012",
#    "tipo_num_doc": "N",
#    "grupo_riesgo": "3",
#    "capacidad_pago": 5000000.0
#}

# Response:
#POST /apiRestView/
#HTTP 202 Accepted
#Allow: POST, OPTIONS
#Content-Type: application/json
#Vary: Accept

################### APIs of GraphQL
# Let's create an API in GraphQL called "apiGraph"
python .\manage.py startapp apiGraph

# GraphQL is indepennt of a particular programming language. It has library for django (https://docs.graphene-python.org/projects/django/en/latest/)
# We must install the library for django: pip install graphene-django

# After many configurations, let's try our graphql API
python .\manage.py runserver

# In http://127.0.0.1:8000/ now the graphql appears

# In http://127.0.0.1:8000/graphql/ we can se the GraphiQL interface to execute queries easier while developing

# In the GraphiQL interface we can click Docs to see all the queries and mutations configurated.

# In the GraphiQL interface we can easily query the clients we have already configured by this query:
#{
#  allClientes{
#    numDoc,
#    tipoNumDoc,
#    grupoRiesgo,
#    capacidadPago
#  }
#}

pip freeze>requirements.txt